{"changed":true,"filter":false,"title":"chat-server.py","tooltip":"/chat/chat-server.py","value":"import streamlit as st\nimport json\nimport websocket\nimport threading\nimport time\nfrom PIL import Image\nimport os\n\nst.title(\"💬 AI SERVICE\")\n\n# WebSocket 메시지 처리 함수\ndef on_message(ws, message):\n    detection_results = json.loads(message)\n    st.session_state['detection_results'] = detection_results\n    st.experimental_rerun()\n\n# WebSocket 설정\nws_url = \"wss://your-websocket-api.execute-api.region.amazonaws.com/Prod\"\nws = websocket.WebSocketApp(ws_url, on_message=on_message)\n\ndef run_websocket():\n    ws.run_forever()\n\n# WebSocket 스레드 시작\nthreading.Thread(target=run_websocket).start()\n\n# 세션 상태 초기화\nif \"stage\" not in st.session_state:\n    st.session_state.stage = 0\nif \"messages\" not in st.session_state:\n    st.session_state.messages = [\n        {\"role\": \"assistant\", \"content\": \"안녕하세요.<br>가방을 눕혀서 올려주세요.\"}\n    ]\nif \"uploaded_image\" not in st.session_state:\n    st.session_state.uploaded_image = None\nif \"show_image\" not in st.session_state:\n    st.session_state.show_image = False\n\n# 메시지 표시\nfor msg in st.session_state.messages:\n    st.chat_message(msg[\"role\"]).markdown(msg[\"content\"], unsafe_allow_html=True)\n\n# 업로드된 이미지 경로 설정\nuploaded_file = './BAGGAGE_20240307_093706_140005_SUPERVISOR_A_ud.jpg'\n\n# 업로드된 이미지를 화면에 표시\nif st.session_state.stage == 0:\n    if uploaded_file and os.path.exists(uploaded_file):\n        st.session_state.uploaded_image = uploaded_file\n\n    st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"스캔을 시작합니다. 잠시만 기다려 주세요...\"})\n    st.chat_message(\"assistant\").write(\"스캔을 시작합니다. 잠시만 기다려 주세요...\")\n    with st.spinner(\"스캔 중...\"):\n        time.sleep(5)\n    st.session_state.stage = 1\n    st.rerun()\n\nelif st.session_state.stage == 1:\n    st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"스캔이 완료되었습니다. 결과를 확인하세요.\"})\n    st.chat_message(\"assistant\").write(\"스캔이 완료되었습니다. 결과를 확인하세요.\")\n    st.session_state.stage = 2\n    st.rerun()\n\nelif st.session_state.stage == 2:\n    detection_results = st.session_state.get('detection_results', None)\n    if detection_results:\n        def get_position_text(positions):\n            position_texts = []\n            if positions[0] > 0:\n                position_texts.append(f\"왼쪽 상단에 {positions[0]}개\")\n            if positions[1] > 0:\n                position_texts.append(f\"오른쪽 상단에 {positions[1]}개\")\n            if positions[2] > 0:\n                position_texts.append(f\"왼쪽 하단에 {positions[2]}개\")\n            if positions[3] > 0:\n                position_texts.append(f\"오른쪽 하단에 {positions[3]}개\")\n            return \", \".join(position_texts)\n\n        def generate_detection_message(detection_results):\n            total_objects = sum([obj[\"amount\"] for obj in detection_results[\"objects\"]])\n            detection_message = f\"총 {total_objects}개의 물품이 탐지되었습니다.\\n\"\n            for obj in detection_results[\"objects\"]:\n                detection_message += f\"<br>{obj['type']}가 {obj['amount']}개 탐지되었습니다.\\n\"\n                position_text = get_position_text(obj[\"position\"])\n                detection_message += f\"<br>{obj['type']}는 {position_text}로 예상됩니다.\\n\"\n            return detection_message\n        \n        detection_message = generate_detection_message(detection_results)\n        st.session_state.messages.append({\"role\": \"assistant\", \"content\": detection_message})\n        st.chat_message(\"assistant\").write(detection_message)\n        st.session_state.show_image = True\n        st.session_state.stage = 3\n        st.rerun()\n\nelif st.session_state.stage == 3:\n    if st.session_state.show_image:\n        if os.path.exists(st.session_state.uploaded_image):\n            st.image(st.session_state.uploaded_image, caption='Detected Objects', use_column_width=True)\n        else:\n            st.error(f\"Error: The file at {st.session_state.uploaded_image} does not exist.\")\n\n    st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"확인을 완료했습니다. 감사합니다.\"})\n    st.chat_message(\"assistant\").write(\"확인을 완료했습니다. 감사합니다.\")\n    st.session_state.stage = 4\n    st.rerun()\n\nelif st.session_state.stage == 4:\n    if st.button('Retry Scanning'):\n        st.session_state.messages.append({\"role\": \"user\", \"content\": \"Retry Scanning\"})\n        st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"다시 스캔을 시작합니다. 잠시만 기다려 주세요...\"})\n        st.chat_message(\"assistant\").write(\"다시 스캔을 시작합니다. 잠시만 기다려 주세요...\")\n        with st.spinner(\"스캔 중...\"):\n            time.sleep(5)\n        st.session_state.stage = 1\n        st.experimental_rerun()\n    if st.button('Complete'):\n        st.session_state.messages.append({\"role\": \"user\", \"content\": \"Complete\"})\n        st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"확인을 완료했습니다. 감사합니다.\"})\n        st.chat_message(\"assistant\").write(\"확인을 완료했습니다. 감사합니다.\")\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n","undoManager":{"mark":-2,"position":2,"stack":[[{"start":{"row":0,"column":0},"end":{"row":148,"column":0},"action":"insert","lines":["import streamlit as st","import time","import json","import websocket","import threading","from PIL import Image","import os","","st.title(\"💬 AI SERVICE\")","","# Function to fetch detection results from DynamoDB","def fetch_detection_results(index):","    dynamodb = boto3.client('dynamodb')","    response = dynamodb.get_item(","        TableName='xmen-detection-results',","        Key={","            'index': {'S': index}","        }","    )","    if 'Item' in response:","        item = response['Item']","        detection_results = {","            'index': item['index']['S'],","            'UserID': item['UserID']['S'],","            's3': item['s3']['S'],","            'objects': json.loads(item['objects']['S'])","        }","        return detection_results","    else:","        return None","","# Function to get position text","def get_position_text(positions):","    position_texts = []","    if positions[0] > 0:","        position_texts.append(f\"왼쪽 상단에 {positions[0]}개\")","    if positions[1] > 0:","        position_texts.append(f\"오른쪽 상단에 {positions[1]}개\")","    if positions[2] > 0:","        position_texts.append(f\"왼쪽 하단에 {positions[2]}개\")","    if positions[3] > 0:","        position_texts.append(f\"오른쪽 하단에 {positions[3]}개\")","    return \", \".join(position_texts)","","# Function to generate detection message","def generate_detection_message(detection_results):","    total_objects = sum([obj[\"amount\"] for obj in detection_results[\"objects\"]])","    detection_message = f\"총 {total_objects}개의 물품이 탐지되었습니다.\\n\"","    for obj in detection_results[\"objects\"]:","        detection_message += f\"<br>{obj['type']}가 {obj['amount']}개 탐지되었습니다.\\n\"","        position_text = get_position_text(obj[\"position\"])","        detection_message += f\"<br>{obj['type']}는 {position_text}로 예상됩니다.\\n\"","    return detection_message","","# Function to handle incoming WebSocket messages","def on_message(ws, message):","    detection_results = json.loads(message)","    st.session_state['detection_results'] = detection_results","    st.experimental_rerun()","","# Initialize WebSocket","ws_url = \"wss://your-websocket-api.execute-api.region.amazonaws.com/Prod\"","ws = websocket.WebSocketApp(ws_url, on_message=on_message)","","def run_websocket():","    ws.run_forever()","","# Start WebSocket in a new thread","threading.Thread(target=run_websocket).start()","","# Initialize session state","if \"stage\" not in st.session_state:","    st.session_state.stage = 0","if \"messages\" not in st.session_state:","    st.session_state.messages = [","        {\"role\": \"assistant\", \"content\": \"안녕하세요.<br>가방을 눕혀서 올려주세요.\"}","    ]","if \"uploaded_image\" not in st.session_state:","    st.session_state.uploaded_image = None","if \"show_image\" not in st.session_state:","    st.session_state.show_image = False","","# 메시지 표시","for msg in st.session_state.messages:","    st.chat_message(msg[\"role\"]).markdown(msg[\"content\"], unsafe_allow_html=True)","","# 이미지 경로 설정","uploaded_file = './BAGGAGE_20240307_093706_140005_SUPERVISOR_A_ud.jpg'","","# 업로드된 이미지를 화면에 표시","if st.session_state.stage == 0:","    if uploaded_file and os.path.exists(uploaded_file):","        st.session_state.uploaded_image = uploaded_file","","    st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"스캔을 시작합니다. 잠시만 기다려 주세요...\"})","    st.chat_message(\"assistant\").write(\"스캔을 시작합니다. 잠시만 기다려 주세요...\")","    with st.spinner(\"스캔 중...\"):","        time.sleep(5)","    st.session_state.stage = 1","    st.rerun()","","elif st.session_state.stage == 1:","    st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"스캔이 완료되었습니다. 결과를 확인하세요.\"})","    st.chat_message(\"assistant\").write(\"스캔이 완료되었습니다. 결과를 확인하세요.\")","    st.session_state.stage = 2","    st.rerun()","","elif st.session_state.stage == 2:","    detection_results = st.session_state.get('detection_results', None)","    if detection_results:","        detection_message = generate_detection_message(detection_results)","        st.session_state.messages.append({\"role\": \"assistant\", \"content\": detection_message})","        st.chat_message(\"assistant\").write(detection_message)","        st.session_state.show_image = True","        st.session_state.stage = 3","        st.rerun()","","elif st.session_state.stage == 3:","    if st.session_state.show_image:","        if os.path.exists(st.session_state.uploaded_image):","            st.image(st.session_state.uploaded_image, caption='Detected Objects', use_column_width=True)","        else:","            st.error(f\"Error: The file at {st.session_state.uploaded_image} does not exist.\")","","    st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"확인을 완료했습니다. 감사합니다.\"})","    st.chat_message(\"assistant\").write(\"확인을 완료했습니다. 감사합니다.\")","    st.session_state.stage = 4","    st.rerun()","","elif st.session_state.stage == 4:","    if st.button('Retry Scanning'):","        st.session_state.messages.append({\"role\": \"user\", \"content\": \"Retry Scanning\"})","        st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"다시 스캔을 시작합니다. 잠시만 기다려 주세요...\"})","        st.chat_message(\"assistant\").write(\"다시 스캔을 시작합니다. 잠시만 기다려 주세요...\")","        with st.spinner(\"스캔 중...\"):","            time.sleep(5)","        st.session_state.stage = 1","        st.experimental_rerun()","    if st.button('Complete'):","        st.session_state.messages.append({\"role\": \"user\", \"content\": \"Complete\"})","        st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"확인을 완료했습니다. 감사합니다.\"})","        st.chat_message(\"assistant\").write(\"확인을 완료했습니다. 감사합니다.\")","","def main():","    pass","","if __name__ == '__main__':","    main()",""],"id":15}],[{"start":{"row":0,"column":0},"end":{"row":148,"column":0},"action":"remove","lines":["import streamlit as st","import time","import json","import websocket","import threading","from PIL import Image","import os","","st.title(\"💬 AI SERVICE\")","","# Function to fetch detection results from DynamoDB","def fetch_detection_results(index):","    dynamodb = boto3.client('dynamodb')","    response = dynamodb.get_item(","        TableName='xmen-detection-results',","        Key={","            'index': {'S': index}","        }","    )","    if 'Item' in response:","        item = response['Item']","        detection_results = {","            'index': item['index']['S'],","            'UserID': item['UserID']['S'],","            's3': item['s3']['S'],","            'objects': json.loads(item['objects']['S'])","        }","        return detection_results","    else:","        return None","","# Function to get position text","def get_position_text(positions):","    position_texts = []","    if positions[0] > 0:","        position_texts.append(f\"왼쪽 상단에 {positions[0]}개\")","    if positions[1] > 0:","        position_texts.append(f\"오른쪽 상단에 {positions[1]}개\")","    if positions[2] > 0:","        position_texts.append(f\"왼쪽 하단에 {positions[2]}개\")","    if positions[3] > 0:","        position_texts.append(f\"오른쪽 하단에 {positions[3]}개\")","    return \", \".join(position_texts)","","# Function to generate detection message","def generate_detection_message(detection_results):","    total_objects = sum([obj[\"amount\"] for obj in detection_results[\"objects\"]])","    detection_message = f\"총 {total_objects}개의 물품이 탐지되었습니다.\\n\"","    for obj in detection_results[\"objects\"]:","        detection_message += f\"<br>{obj['type']}가 {obj['amount']}개 탐지되었습니다.\\n\"","        position_text = get_position_text(obj[\"position\"])","        detection_message += f\"<br>{obj['type']}는 {position_text}로 예상됩니다.\\n\"","    return detection_message","","# Function to handle incoming WebSocket messages","def on_message(ws, message):","    detection_results = json.loads(message)","    st.session_state['detection_results'] = detection_results","    st.experimental_rerun()","","# Initialize WebSocket","ws_url = \"wss://your-websocket-api.execute-api.region.amazonaws.com/Prod\"","ws = websocket.WebSocketApp(ws_url, on_message=on_message)","","def run_websocket():","    ws.run_forever()","","# Start WebSocket in a new thread","threading.Thread(target=run_websocket).start()","","# Initialize session state","if \"stage\" not in st.session_state:","    st.session_state.stage = 0","if \"messages\" not in st.session_state:","    st.session_state.messages = [","        {\"role\": \"assistant\", \"content\": \"안녕하세요.<br>가방을 눕혀서 올려주세요.\"}","    ]","if \"uploaded_image\" not in st.session_state:","    st.session_state.uploaded_image = None","if \"show_image\" not in st.session_state:","    st.session_state.show_image = False","","# 메시지 표시","for msg in st.session_state.messages:","    st.chat_message(msg[\"role\"]).markdown(msg[\"content\"], unsafe_allow_html=True)","","# 이미지 경로 설정","uploaded_file = './BAGGAGE_20240307_093706_140005_SUPERVISOR_A_ud.jpg'","","# 업로드된 이미지를 화면에 표시","if st.session_state.stage == 0:","    if uploaded_file and os.path.exists(uploaded_file):","        st.session_state.uploaded_image = uploaded_file","","    st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"스캔을 시작합니다. 잠시만 기다려 주세요...\"})","    st.chat_message(\"assistant\").write(\"스캔을 시작합니다. 잠시만 기다려 주세요...\")","    with st.spinner(\"스캔 중...\"):","        time.sleep(5)","    st.session_state.stage = 1","    st.rerun()","","elif st.session_state.stage == 1:","    st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"스캔이 완료되었습니다. 결과를 확인하세요.\"})","    st.chat_message(\"assistant\").write(\"스캔이 완료되었습니다. 결과를 확인하세요.\")","    st.session_state.stage = 2","    st.rerun()","","elif st.session_state.stage == 2:","    detection_results = st.session_state.get('detection_results', None)","    if detection_results:","        detection_message = generate_detection_message(detection_results)","        st.session_state.messages.append({\"role\": \"assistant\", \"content\": detection_message})","        st.chat_message(\"assistant\").write(detection_message)","        st.session_state.show_image = True","        st.session_state.stage = 3","        st.rerun()","","elif st.session_state.stage == 3:","    if st.session_state.show_image:","        if os.path.exists(st.session_state.uploaded_image):","            st.image(st.session_state.uploaded_image, caption='Detected Objects', use_column_width=True)","        else:","            st.error(f\"Error: The file at {st.session_state.uploaded_image} does not exist.\")","","    st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"확인을 완료했습니다. 감사합니다.\"})","    st.chat_message(\"assistant\").write(\"확인을 완료했습니다. 감사합니다.\")","    st.session_state.stage = 4","    st.rerun()","","elif st.session_state.stage == 4:","    if st.button('Retry Scanning'):","        st.session_state.messages.append({\"role\": \"user\", \"content\": \"Retry Scanning\"})","        st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"다시 스캔을 시작합니다. 잠시만 기다려 주세요...\"})","        st.chat_message(\"assistant\").write(\"다시 스캔을 시작합니다. 잠시만 기다려 주세요...\")","        with st.spinner(\"스캔 중...\"):","            time.sleep(5)","        st.session_state.stage = 1","        st.experimental_rerun()","    if st.button('Complete'):","        st.session_state.messages.append({\"role\": \"user\", \"content\": \"Complete\"})","        st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"확인을 완료했습니다. 감사합니다.\"})","        st.chat_message(\"assistant\").write(\"확인을 완료했습니다. 감사합니다.\")","","def main():","    pass","","if __name__ == '__main__':","    main()",""],"id":16,"ignore":true},{"start":{"row":0,"column":0},"end":{"row":125,"column":0},"action":"insert","lines":["import streamlit as st","import json","import websocket","import threading","import time","from PIL import Image","import os","","st.title(\"💬 AI SERVICE\")","","# WebSocket 메시지 처리 함수","def on_message(ws, message):  # [수정] WebSocket 메시지 처리 함수","    detection_results = json.loads(message)","    st.session_state['detection_results'] = detection_results","    st.experimental_rerun()","","# WebSocket 설정","ws_url = \"wss://your-websocket-api.execute-api.region.amazonaws.com/Prod\"","ws = websocket.WebSocketApp(ws_url, on_message=on_message)  # [수정] WebSocket 설정","","def run_websocket():  # [수정] WebSocket 스레드 실행 함수","    ws.run_forever()","","# WebSocket 스레드 시작","threading.Thread(target=run_websocket).start()  # [수정] WebSocket 스레드 시작","","# 세션 상태 초기화","if \"stage\" not in st.session_state:","    st.session_state.stage = 0","if \"messages\" not in st.session_state:","    st.session_state.messages = [","        {\"role\": \"assistant\", \"content\": \"안녕하세요.<br>가방을 눕혀서 올려주세요.\"}","    ]","if \"uploaded_image\" not in st.session_state:","    st.session_state.uploaded_image = None","if \"show_image\" not in st.session_state:","    st.session_state.show_image = False","","# 메시지 표시","for msg in st.session_state.messages:","    st.chat_message(msg[\"role\"]).markdown(msg[\"content\"], unsafe_allow_html=True)","","# 업로드된 이미지 경로 설정","uploaded_file = './BAGGAGE_20240307_093706_140005_SUPERVISOR_A_ud.jpg'","","# 업로드된 이미지를 화면에 표시","if st.session_state.stage == 0:","    if uploaded_file and os.path.exists(uploaded_file):","        st.session_state.uploaded_image = uploaded_file","","    st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"스캔을 시작합니다. 잠시만 기다려 주세요...\"})","    st.chat_message(\"assistant\").write(\"스캔을 시작합니다. 잠시만 기다려 주세요...\")","    with st.spinner(\"스캔 중...\"):","        time.sleep(5)","    st.session_state.stage = 1","    st.rerun()","","elif st.session_state.stage == 1:","    st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"스캔이 완료되었습니다. 결과를 확인하세요.\"})","    st.chat_message(\"assistant\").write(\"스캔이 완료되었습니다. 결과를 확인하세요.\")","    st.session_state.stage = 2","    st.rerun()","","elif st.session_state.stage == 2:","    detection_results = st.session_state.get('detection_results', None)","    if detection_results:","        def get_position_text(positions):","            position_texts = []","            if positions[0] > 0:","                position_texts.append(f\"왼쪽 상단에 {positions[0]}개\")","            if positions[1] > 0:","                position_texts.append(f\"오른쪽 상단에 {positions[1]}개\")","            if positions[2] > 0:","                position_texts.append(f\"왼쪽 하단에 {positions[2]}개\")","            if positions[3] > 0:","                position_texts.append(f\"오른쪽 하단에 {positions[3]}개\")","            return \", \".join(position_texts)","","        def generate_detection_message(detection_results):","            total_objects = sum([obj[\"amount\"] for obj in detection_results[\"objects\"]])","            detection_message = f\"총 {total_objects}개의 물품이 탐지되었습니다.\\n\"","            for obj in detection_results[\"objects\"]:","                detection_message += f\"<br>{obj['type']}가 {obj['amount']}개 탐지되었습니다.\\n\"","                position_text = get_position_text(obj[\"position\"])","                detection_message += f\"<br>{obj['type']}는 {position_text}로 예상됩니다.\\n\"","            return detection_message","        ","        detection_message = generate_detection_message(detection_results)","        st.session_state.messages.append({\"role\": \"assistant\", \"content\": detection_message})","        st.chat_message(\"assistant\").write(detection_message)","        st.session_state.show_image = True","        st.session_state.stage = 3","        st.rerun()","","elif st.session_state.stage == 3:","    if st.session_state.show_image:","        if os.path.exists(st.session_state.uploaded_image):","            st.image(st.session_state.uploaded_image, caption='Detected Objects', use_column_width=True)","        else:","            st.error(f\"Error: The file at {st.session_state.uploaded_image} does not exist.\")","","    st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"확인을 완료했습니다. 감사합니다.\"})","    st.chat_message(\"assistant\").write(\"확인을 완료했습니다. 감사합니다.\")","    st.session_state.stage = 4","    st.rerun()","","elif st.session_state.stage == 4:","    if st.button('Retry Scanning'):","        st.session_state.messages.append({\"role\": \"user\", \"content\": \"Retry Scanning\"})","        st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"다시 스캔을 시작합니다. 잠시만 기다려 주세요...\"})","        st.chat_message(\"assistant\").write(\"다시 스캔을 시작합니다. 잠시만 기다려 주세요...\")","        with st.spinner(\"스캔 중...\"):","            time.sleep(5)","        st.session_state.stage = 1","        st.experimental_rerun()","    if st.button('Complete'):","        st.session_state.messages.append({\"role\": \"user\", \"content\": \"Complete\"})","        st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"확인을 완료했습니다. 감사합니다.\"})","        st.chat_message(\"assistant\").write(\"확인을 완료했습니다. 감사합니다.\")","","def main():","    pass","","if __name__ == '__main__':","    main()",""]}],[{"start":{"row":0,"column":0},"end":{"row":125,"column":0},"action":"remove","lines":["import streamlit as st","import json","import websocket","import threading","import time","from PIL import Image","import os","","st.title(\"💬 AI SERVICE\")","","# WebSocket 메시지 처리 함수","def on_message(ws, message):  # [수정] WebSocket 메시지 처리 함수","    detection_results = json.loads(message)","    st.session_state['detection_results'] = detection_results","    st.experimental_rerun()","","# WebSocket 설정","ws_url = \"wss://your-websocket-api.execute-api.region.amazonaws.com/Prod\"","ws = websocket.WebSocketApp(ws_url, on_message=on_message)  # [수정] WebSocket 설정","","def run_websocket():  # [수정] WebSocket 스레드 실행 함수","    ws.run_forever()","","# WebSocket 스레드 시작","threading.Thread(target=run_websocket).start()  # [수정] WebSocket 스레드 시작","","# 세션 상태 초기화","if \"stage\" not in st.session_state:","    st.session_state.stage = 0","if \"messages\" not in st.session_state:","    st.session_state.messages = [","        {\"role\": \"assistant\", \"content\": \"안녕하세요.<br>가방을 눕혀서 올려주세요.\"}","    ]","if \"uploaded_image\" not in st.session_state:","    st.session_state.uploaded_image = None","if \"show_image\" not in st.session_state:","    st.session_state.show_image = False","","# 메시지 표시","for msg in st.session_state.messages:","    st.chat_message(msg[\"role\"]).markdown(msg[\"content\"], unsafe_allow_html=True)","","# 업로드된 이미지 경로 설정","uploaded_file = './BAGGAGE_20240307_093706_140005_SUPERVISOR_A_ud.jpg'","","# 업로드된 이미지를 화면에 표시","if st.session_state.stage == 0:","    if uploaded_file and os.path.exists(uploaded_file):","        st.session_state.uploaded_image = uploaded_file","","    st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"스캔을 시작합니다. 잠시만 기다려 주세요...\"})","    st.chat_message(\"assistant\").write(\"스캔을 시작합니다. 잠시만 기다려 주세요...\")","    with st.spinner(\"스캔 중...\"):","        time.sleep(5)","    st.session_state.stage = 1","    st.rerun()","","elif st.session_state.stage == 1:","    st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"스캔이 완료되었습니다. 결과를 확인하세요.\"})","    st.chat_message(\"assistant\").write(\"스캔이 완료되었습니다. 결과를 확인하세요.\")","    st.session_state.stage = 2","    st.rerun()","","elif st.session_state.stage == 2:","    detection_results = st.session_state.get('detection_results', None)","    if detection_results:","        def get_position_text(positions):","            position_texts = []","            if positions[0] > 0:","                position_texts.append(f\"왼쪽 상단에 {positions[0]}개\")","            if positions[1] > 0:","                position_texts.append(f\"오른쪽 상단에 {positions[1]}개\")","            if positions[2] > 0:","                position_texts.append(f\"왼쪽 하단에 {positions[2]}개\")","            if positions[3] > 0:","                position_texts.append(f\"오른쪽 하단에 {positions[3]}개\")","            return \", \".join(position_texts)","","        def generate_detection_message(detection_results):","            total_objects = sum([obj[\"amount\"] for obj in detection_results[\"objects\"]])","            detection_message = f\"총 {total_objects}개의 물품이 탐지되었습니다.\\n\"","            for obj in detection_results[\"objects\"]:","                detection_message += f\"<br>{obj['type']}가 {obj['amount']}개 탐지되었습니다.\\n\"","                position_text = get_position_text(obj[\"position\"])","                detection_message += f\"<br>{obj['type']}는 {position_text}로 예상됩니다.\\n\"","            return detection_message","        ","        detection_message = generate_detection_message(detection_results)","        st.session_state.messages.append({\"role\": \"assistant\", \"content\": detection_message})","        st.chat_message(\"assistant\").write(detection_message)","        st.session_state.show_image = True","        st.session_state.stage = 3","        st.rerun()","","elif st.session_state.stage == 3:","    if st.session_state.show_image:","        if os.path.exists(st.session_state.uploaded_image):","            st.image(st.session_state.uploaded_image, caption='Detected Objects', use_column_width=True)","        else:","            st.error(f\"Error: The file at {st.session_state.uploaded_image} does not exist.\")","","    st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"확인을 완료했습니다. 감사합니다.\"})","    st.chat_message(\"assistant\").write(\"확인을 완료했습니다. 감사합니다.\")","    st.session_state.stage = 4","    st.rerun()","","elif st.session_state.stage == 4:","    if st.button('Retry Scanning'):","        st.session_state.messages.append({\"role\": \"user\", \"content\": \"Retry Scanning\"})","        st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"다시 스캔을 시작합니다. 잠시만 기다려 주세요...\"})","        st.chat_message(\"assistant\").write(\"다시 스캔을 시작합니다. 잠시만 기다려 주세요...\")","        with st.spinner(\"스캔 중...\"):","            time.sleep(5)","        st.session_state.stage = 1","        st.experimental_rerun()","    if st.button('Complete'):","        st.session_state.messages.append({\"role\": \"user\", \"content\": \"Complete\"})","        st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"확인을 완료했습니다. 감사합니다.\"})","        st.chat_message(\"assistant\").write(\"확인을 완료했습니다. 감사합니다.\")","","def main():","    pass","","if __name__ == '__main__':","    main()",""],"id":17,"ignore":true},{"start":{"row":0,"column":0},"end":{"row":125,"column":0},"action":"insert","lines":["import streamlit as st","import json","import websocket","import threading","import time","from PIL import Image","import os","","st.title(\"💬 AI SERVICE\")","","# WebSocket 메시지 처리 함수","def on_message(ws, message):","    detection_results = json.loads(message)","    st.session_state['detection_results'] = detection_results","    st.experimental_rerun()","","# WebSocket 설정","ws_url = \"wss://your-websocket-api.execute-api.region.amazonaws.com/Prod\"","ws = websocket.WebSocketApp(ws_url, on_message=on_message)","","def run_websocket():","    ws.run_forever()","","# WebSocket 스레드 시작","threading.Thread(target=run_websocket).start()","","# 세션 상태 초기화","if \"stage\" not in st.session_state:","    st.session_state.stage = 0","if \"messages\" not in st.session_state:","    st.session_state.messages = [","        {\"role\": \"assistant\", \"content\": \"안녕하세요.<br>가방을 눕혀서 올려주세요.\"}","    ]","if \"uploaded_image\" not in st.session_state:","    st.session_state.uploaded_image = None","if \"show_image\" not in st.session_state:","    st.session_state.show_image = False","","# 메시지 표시","for msg in st.session_state.messages:","    st.chat_message(msg[\"role\"]).markdown(msg[\"content\"], unsafe_allow_html=True)","","# 업로드된 이미지 경로 설정","uploaded_file = './BAGGAGE_20240307_093706_140005_SUPERVISOR_A_ud.jpg'","","# 업로드된 이미지를 화면에 표시","if st.session_state.stage == 0:","    if uploaded_file and os.path.exists(uploaded_file):","        st.session_state.uploaded_image = uploaded_file","","    st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"스캔을 시작합니다. 잠시만 기다려 주세요...\"})","    st.chat_message(\"assistant\").write(\"스캔을 시작합니다. 잠시만 기다려 주세요...\")","    with st.spinner(\"스캔 중...\"):","        time.sleep(5)","    st.session_state.stage = 1","    st.rerun()","","elif st.session_state.stage == 1:","    st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"스캔이 완료되었습니다. 결과를 확인하세요.\"})","    st.chat_message(\"assistant\").write(\"스캔이 완료되었습니다. 결과를 확인하세요.\")","    st.session_state.stage = 2","    st.rerun()","","elif st.session_state.stage == 2:","    detection_results = st.session_state.get('detection_results', None)","    if detection_results:","        def get_position_text(positions):","            position_texts = []","            if positions[0] > 0:","                position_texts.append(f\"왼쪽 상단에 {positions[0]}개\")","            if positions[1] > 0:","                position_texts.append(f\"오른쪽 상단에 {positions[1]}개\")","            if positions[2] > 0:","                position_texts.append(f\"왼쪽 하단에 {positions[2]}개\")","            if positions[3] > 0:","                position_texts.append(f\"오른쪽 하단에 {positions[3]}개\")","            return \", \".join(position_texts)","","        def generate_detection_message(detection_results):","            total_objects = sum([obj[\"amount\"] for obj in detection_results[\"objects\"]])","            detection_message = f\"총 {total_objects}개의 물품이 탐지되었습니다.\\n\"","            for obj in detection_results[\"objects\"]:","                detection_message += f\"<br>{obj['type']}가 {obj['amount']}개 탐지되었습니다.\\n\"","                position_text = get_position_text(obj[\"position\"])","                detection_message += f\"<br>{obj['type']}는 {position_text}로 예상됩니다.\\n\"","            return detection_message","        ","        detection_message = generate_detection_message(detection_results)","        st.session_state.messages.append({\"role\": \"assistant\", \"content\": detection_message})","        st.chat_message(\"assistant\").write(detection_message)","        st.session_state.show_image = True","        st.session_state.stage = 3","        st.rerun()","","elif st.session_state.stage == 3:","    if st.session_state.show_image:","        if os.path.exists(st.session_state.uploaded_image):","            st.image(st.session_state.uploaded_image, caption='Detected Objects', use_column_width=True)","        else:","            st.error(f\"Error: The file at {st.session_state.uploaded_image} does not exist.\")","","    st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"확인을 완료했습니다. 감사합니다.\"})","    st.chat_message(\"assistant\").write(\"확인을 완료했습니다. 감사합니다.\")","    st.session_state.stage = 4","    st.rerun()","","elif st.session_state.stage == 4:","    if st.button('Retry Scanning'):","        st.session_state.messages.append({\"role\": \"user\", \"content\": \"Retry Scanning\"})","        st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"다시 스캔을 시작합니다. 잠시만 기다려 주세요...\"})","        st.chat_message(\"assistant\").write(\"다시 스캔을 시작합니다. 잠시만 기다려 주세요...\")","        with st.spinner(\"스캔 중...\"):","            time.sleep(5)","        st.session_state.stage = 1","        st.experimental_rerun()","    if st.button('Complete'):","        st.session_state.messages.append({\"role\": \"user\", \"content\": \"Complete\"})","        st.session_state.messages.append({\"role\": \"assistant\", \"content\": \"확인을 완료했습니다. 감사합니다.\"})","        st.chat_message(\"assistant\").write(\"확인을 완료했습니다. 감사합니다.\")","","def main():","    pass","","if __name__ == '__main__':","    main()",""]}]]},"ace":{"folds":[],"scrolltop":1302.5999999999983,"scrollleft":0,"selection":{"start":{"row":11,"column":19},"end":{"row":11,"column":19},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":80,"state":"start","mode":"ace/mode/python"}},"timestamp":1716354162148}